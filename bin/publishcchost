#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Usage: publishcchost [OPTION]...
 or:   publishcchost [OPTION]... FILE_PATH
 or:   publishcchost [OPTION]... FILE_PATH CCHOST_URL
Upload file to ccHost Installation

Mandatory arguments to long options are mandatory for short options too.
  -u, --username <login name>     try to log with this username
  -p, --password <password>       NOT SECURE try to log with this password
  -t, --submission-type <type>    submit the file as the specified type.
                                  Case-insensitive (i.e. \"Cappella\" and
                                               \"cappella\" are the same)
  -v, --verbose                   explain what is being done
  -h, --help                      display this help and exit
  --dont-ask                      dont ask for other input values for submission
                                               form than given by cmdline
  --input-name                    name of input for submission form
  --input-value                   value of input for submission form
input-name and input-value is like a pair, one give the name and other
the value to the input that will be submitted. A lot of --input-name
can be written, but it has to be the same quantity of --input-value.
The first --input-name will match with the first --input-value and so on...
"""

import os.path
import sys
import urllib
import HTMLParser
import re
import getopt
import getpass
import urllib2, mimetypes, mimetools

def publishcchost(argv = None):
    """Function to publish files to ccHost installations.
    Parse command line, interface with the user.
    Call functions to validate url, get title, log user, pick submission type and upload file"""
    
    try:
        if argv is None:
            argv = sys.argv
            
        # set all user's informations
        url = None
        username = None
        password = None
        type = None
        filename = None
        verbose = False
        ask = True
        inputnames = []
        inputvalues = []

        # parse command line options using getopt lib
        try:
            opts, args = getopt.getopt(sys.argv[1:], "h v u: p: t:",
                                       ["help", "verbose", "username=", "password=", "submission-type=",
                                        "dont-ask", "input-name=", "input-value="])
        except getopt.error, msg:
            print msg
            print "for help use --help"
            sys.exit(2)
        # process options
        for opt, arg in opts:
            if opt in ("-h", "--help"): #display help
                print __doc__
                sys.exit(0)
            elif opt in ("-v", "--verbose"):
                verbose = True
            elif opt in ("-u", "--username"): #get login name
                username = arg
            elif opt in ("-p", "--password"): #get password
                password = arg
            elif opt in ("-t", "--submission-type"): #get submission type
                type = arg
            elif opt in ("--dont-ask"):
                ask = False
            elif opt in ("--input-name"):
                inputnames.append(arg)
            elif opt in ("--input-value"):
                inputvalues.append(arg)
        # verify quantity of input-names and input-values
        if len(inputnames) > len(inputvalues):
            print "Error: missing input-value"
            print "for help use --help"
            sys.exit(2)
        elif len(inputnames) < len(inputvalues):
            print "Error: missing input-name"
            print "for help use --help"
            sys.exit(2)
        # process arguments
        if len(args) == 1:
            filename = args[0]
        elif len(args) == 2:
            filename = args[0]
            url = args[1]
        elif len(args) >= 2:
            print "too many arguments"
            print "for help use --help"
            sys.exit(2)

        if verbose:
            print "Starting..."
        Request, urlopen = loader() # prepare to handle cookies

        # another way to get URL
        if url == None:
            try:
                url = raw_input("Enter the ccHost Installation URL: ")
            except EOFError:
                print "\nAborted by user"
                sys.exit(2)

        if url[len(url)-1] != '/':  # the '/' is necessary to concatenate the selector
            url = url + "/" 

        if location_validate(url, Request, urlopen):
            cchosttitle = title(url, Request, urlopen)
            if verbose:
                print "Valid URL"
                print "Welcome to "+ cchosttitle

            # get login name, if it was not given yet
            if username == None:
                try:
                    username = raw_input("Enter " + cchosttitle + " login name: ")
                except EOFError:
                    print "\nAborted by user"
                    sys.exit(2)

            # get password. getpass prompt the user for a password without echoing.
            if password == None:
                try:
                    password = getpass.getpass("Enter " + cchosttitle + " password: ")
                except EOFError:
                    print "\nAborted by user"
                    sys.exit(2)
        
            if user_validate(username, password, url, Request, urlopen):
                if verbose:
                    print "Logged as "+ username + "..."

                list = getSubmissionTypes(url, Request, urlopen)
                option = 0
                if type != None:
                    # try to match type with the list
                    for aux in range(len(list)):
                        if (aux % 2 == 1):
                            if re.search(type, list[aux], re.I) != None: #re.I is a flag to case-insensitive
                                option = aux/2+1
                                if verbose:
                                    print "Submission Type: " + list[aux]
                                break
                    if option == 0 and verbose:
                        print "OPTION --submission-type \"" + type +"\" doesn't match"
                if option == 0: #type didn't match with the list
                    # display all enabled submission types
                    print "Pick Up Submission Type"
                    for aux in range(len(list)):
                        if (aux % 2 == 1):
                            print str((aux/2)+1) +") " + list[aux]
                    # and user must choose one
                    while option < 1 or option > len(list)/2:
                        try:
                            option = int(raw_input("Choose a number: "))
                        except EOFError:
                            print "\nAborted by user"
                            sys.exit(2)
                        except ValueError:
                            print "Error: it must be a number"
                            option = 0
                        
                uploadSucceeded, fileURL = upload(list[2*(option-1)], Request, urlopen, ask, filename, inputnames, inputvalues)
                if uploadSucceeded:
                    if verbose:
                        print "Uploaded succedded"
                        print "See results here: " + fileURL
                        sys.exit(0)
                else:
                    print "Upload Failed"
                    sys.exit(1)
            else:
                print "Unknown User or Wrong Password"
                sys.exit(1)
        else:
            print "Invalid URL"
            sys.exit(1)
    except (KeyboardInterrupt, SystemExit):
        print "Aborted by user"


def loader():
    """Try to import some cookielib, urllib2, or ClientCookie"""

    cj = None
    ClientCookie = None
    cookielib = None
    
    try:  # see if cookielib is available
        import cookielib            
    except ImportError:
        pass
    else:
        import urllib2    
        urlopen = urllib2.urlopen
        cj = cookielib.LWPCookieJar()  
        Request = urllib2.Request
    
    if not cookielib:  # if importing cookielib fails, try ClientCookie
        try:                                            
            import ClientCookie 
        except ImportError:
            import urllib2
            urlopen = urllib2.urlopen
            Request = urllib2.Request
        else:
            urlopen = ClientCookie.urlopen
            cj = ClientCookie.LWPCookieJar()
            Request = ClientCookie.Request

    # install CookieJar so that it is used as the default CookieProcessor in the default opener handler
    if cj != None:
        if cookielib:
            opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))
            urllib2.install_opener(opener)
        else:
            opener = ClientCookie.build_opener(ClientCookie.HTTPCookieProcessor(cj))
            ClientCookie.install_opener(opener)
    return Request, urlopen


def location_validate(url, Request, urlopen):
    """Confirm that the url is a valid CCHost Installation
    return True if valid, otherwise return False."""

    login_url = url + "?ccm=/media/login"
    txdata = None
    txheaders =  {'User-agent' : 'ccPublisher', 'Refer' : login_url}
    try:
        req = Request(login_url, txdata, txheaders) # create a request object
        handle = urlopen(req)
    except IOError, e:
        print 'Failed to open "%s".' % login_url
        if hasattr(e, 'code'):
            print 'Failed with error code - %s.' % e.code
        elif hasattr(e, 'reason'):
            print "The error reason:", e.reason
            print "This usually means the server doesn't exist, is down, or we don't have an internet connection."
        sys.exit(2)
        return False
            
    else:
        # parse the requested page
        htmlSource = handle.read()
        p = linkParser()
        p.feed(htmlSource)
        p.close()
        return p.valid


class linkParser(HTMLParser.HTMLParser):
    """Parse login page to verify if there are a login form"""
    def __init__(self):
        HTMLParser.HTMLParser.__init__(self)
        self.valid = False
    def handle_starttag(self, tag, attrs):
        if tag=='form':
            for atribute in attrs:
                if atribute[0] == "id" and atribute[1] == "userloginform":
                    self.valid = True


def title(url, Request, urlopen):
    """Get CCHost Installation's Title"""

    txdata = None
    txheaders =  {'User-agent' : 'ccPublisher', 'Refer' : url}
    try:
        req = Request(url, txdata, txheaders) # create a request object
        handle = urlopen(req)
    except IOError, e:
        print 'Failed to open "%s".' % url
        if hasattr(e, 'code'):
            print 'Failed with error code - %s.' % e.code
        elif hasattr(e, 'reason'):
            print "The error reason:", e.reason
            print "This usually means the server doesn't exist, is down, or we don't have an internet connection."
        sys.exit(2)
    else:
        # parse requested page
        htmlSource = handle.read()
        p = getTitle() # start the HTMLParser
        p.feed(htmlSource) # take it a html that need be parsed
        p.close()
        if p.title != '' and p.title != None:
            return p.title
        else:
            return 'CCHost Installlation Login'
    return 'CCHost Installlation Login'


class getTitle(HTMLParser.HTMLParser):
    """Get the title of the page, finding tag \"title\""""
    def __init__(self):
        HTMLParser.HTMLParser.__init__(self)
        self.isTitle = False
        self.title = ''
    def handle_starttag(self, tag, attrs):
        if tag=='title':
            self.isTitle = True
    def handle_endtag(self, tag):
        if tag=='title':
            self.isTitle = False
    # title is all the data between the begin and and of "title" tag
    def handle_data(self, data):
        if self.isTitle:
            self.title += data


def user_validate(username, password, cchost_url, Request, urlopen):
    """Confirm that the username/password combination is valid for cchost_url ccHost Installation;
    return True if valid, otherwise return False."""

    loginurl =  cchost_url + "?ccm=/media/login"
    values = {'user_name' : username, 'user_password' : password, 'userlogin' : 'classname'}
    txdata = urllib.urlencode(values)
    txheaders =  {'User-agent' : 'ccPublisher', 'Refer' : loginurl}
    try:
        req = Request(loginurl, txdata, txheaders) # create a request object
        handle = urlopen(req)
    except IOError, e:
        print 'Failed to open "%s".' % loginurl
        if hasattr(e, 'code'):
            print 'Failed with error code - %s.' % e.code
        elif hasattr(e, 'reason'):
            print "The error reason:", e.reason
            print "This usually means the server doesn't exist, is down, or we don't have an internet connection."
        sys.exit(2)
    else:
        return is_logged_in(handle)

        
def is_logged_in(handle):
    """Start and feed HTMLParser"""
    htmlSource = handle.read()
    p = userParser()
    p.feed(htmlSource)
    p.close()
    return p.logged_in
    

class userParser(HTMLParser.HTMLParser):
    """Parse login page to verify if user is logged in"""
    def __init__(self):
        HTMLParser.HTMLParser.__init__(self)
        self.logged_in = True
    def handle_starttag(self, tag, attrs):
        if tag=='form':
            for atribute in attrs:
                if atribute[0] == "id" and atribute[1] == "userloginform":
                    self.logged_in = False


def getSubmissionTypes(url, Request, urlopen):
    """Return a list of all submission types enabled"""

    url =  url + "?ccm=/media/submit"
    txdata = None
    txheaders =  {'User-agent' : 'ccPublisher', 'Refer' : url}
    try:
        req = Request(url, txdata, txheaders) # create a request object
        handle = urlopen(req)
    except IOError, e:
        print 'Failed to open "%s".' % url
        if hasattr(e, 'code'):
            print 'Failed with error code - %s.' % e.code
        elif hasattr(e, 'reason'):
            print "The error reason:", e.reason
            print "This usually means the server doesn't exist, is down, or we don't have an internet connection."
        sys.exit(2)
    else:
        # parse submission page
        htmlSource = handle.read()
        p = submissionParser()
        p.feed(htmlSource)
        p.close()
        return p.submissiontype
    return 'CCHost Installlation Login'


class submissionParser(HTMLParser.HTMLParser):
    """Parse submission page looking for all possible submission type page"""
    def __init__(self):
        HTMLParser.HTMLParser.__init__(self)
        self.isLink = False
        self.submissiontype = []
    def handle_starttag(self, tag, attrs):
        if tag=='a':
            for atribute in attrs:
                if atribute[0] == "href" and self.isSubmissionLink(atribute[1]):
                    self.isLink = True
                    self.submissiontype.append(atribute[1])
    def handle_endtag(self, tag):
        if tag=='a':
            self.isLink = False
    def handle_data(self, data):
        if self.isLink:
            self.submissiontype.append(data)
    def isSubmissionLink(self, url):
        if re.search("/media/submit/", url, 0) == None:
            return False
        else:
            return True


#FIXME not yet finished  - postremixform
def upload(url, Request, urlopen, ask, filename, inputnames, inputvalues):
    """Upload file using multipart/form-data and return URL"""
    formID = getFormID(url, Request, urlopen)
    if formID == "newuploadform":
        form = getForm(url, Request, urlopen) # list with requested submission information
        values, files = getInformation(form, ask, filename, inputnames, inputvalues)

        # try to upload
        htmlSource = post_multipart(url, values, files, urlopen, Request)
        p = uploadParser() # verify if upload succeeded
        p.feed(htmlSource)
        p.close()
        return p.uploadSucceeded, p.url
        
    
    #elif formID == "postremixform":


class uploadParser(HTMLParser.HTMLParser):
    """Parse upload response"""
    def __init__(self):
        HTMLParser.HTMLParser.__init__(self)
        self.uploadSucceeded = False
        self.url = None
    def handle_starttag(self, tag, attrs):
        if tag=='a':
            for atribute in attrs:
                if atribute[0] == "href" and self.isFileLink(atribute[1]):
                    self.uploadSucceeded = True
                    self.url = atribute[1]
    def isFileLink(self, url):
        if re.search("/media/files/", url, 0) == None:
            return False
        else:
            return True


def getForm(url, Request, urlopen):
    """Make a list of dictionaries with all requested information about submission, parsing submission page
    All requested information about submission will be put into a list
    It's a list of dictionaries
    Each dictionary represent one form input.
    dic['type'] -> type of input
    dic['name'] -> identifier of input
    dic['value'] -> list of possible values to input. It's fundamental to hidden type input and radio type too.
    """
    txdata = None
    txheaders =  {'User-agent' : 'ccPublisher', 'Refer' : url}
    try:
        req = Request(url, txdata, txheaders) # create a request object
        handle = urlopen(req)
    except IOError, e:
        print 'Failed to open "%s".' % url
        if hasattr(e, 'code'):
            print 'Failed with error code - %s.' % e.code
        elif hasattr(e, 'reason'):
            print "The error reason:", e.reason
            print "This usually means the server doesn't exist, is down, or we don't have an internet connection."
        sys.exit(2)
    else:
        htmlSource = handle.read()
        p = formParser()
        p.feed(htmlSource)
        p.close()
        return p.form


class formParser(HTMLParser.HTMLParser):
    """Parse submission form page looking for all inputs"""
    def __init__(self):
        HTMLParser.HTMLParser.__init__(self)
        self.validform = False
        self.inf = {}
        self.form = []
        self.submissiontype = []
    def handle_starttag(self, tag, attrs):
        if tag=='input' and self.validform:
            inf = {}
            inf['value'] = []
            inf['type'] = None
            for atribute in attrs:
                if atribute[0] == "type" or atribute[0] == "name":
                    inf[atribute[0]] = atribute[1]
                elif (atribute[0] == "checked" and atribute[1] == "checked") or atribute[0] == "value":
                    inf['value'].append(atribute[1])
            self.inf = inf
        elif tag=='form':
            for atribute in attrs:
                if atribute[0] == "enctype" and atribute[1] == "multipart/form-data":
                    self.validform = True
    def handle_endtag(self, tag):
        if tag=='input' and self.validform:
            if self.inf['type'] == "submit":
                return
            elif self.inf['type'] == "radio":
                pos = 0
                for elem in self.form:
                    if self.inf['name'] == elem['name']:
                        self.form[pos]['value'].append(self.inf['value'][0])
                        return
                    pos += 1
            self.form.append(self.inf)
        elif tag=='form':
            self.validform = False


def getInformation(form, ask, filename, inputnames, inputvalues):
    """Get submission information from user and return a list with that
    values=[[key1, value1], [key2,  value2], ...]
    file = [name, filename]
    """
    values = [] # values necessary to submit the file
    value = []
    files = [] # files to submit
    file = []
    # process all information evaluating it's type
    for inf in form:
        pos = 0
        found = False
        
        for name in inputnames:
            if inf['name'] == name:
                value.append(name)
                value.append(inputvalues[pos])
                values.append(value)
                value = []
                found = True
            pos += 1

        if found:
            pass
        elif inf['type'] == "hidden":
            value.append(inf['name'])
            value.append(inf['value'][0])
            values.append(value)
            value = []
        elif inf['type'] == "file" and filename != None:
            file.append(inf['name'])
            file.append(filename)
            try:
                file.append(open(filename,'rb').read())
            except IOError, e:
                print 'Failed to open file "%s".' % filename
                print e
                sys.exit(2)
            files.append(file)
            file = []
        elif ask:
            if inf['type'] == "text" or inf['type'] == "file":
                try:
                    ans = raw_input("Enter " + inf['name'] + ": ")
                except EOFError:
                    print "\nAborted by user"
                    sys.exit(2)
                if inf['type'] == "file":
                    file.append(inf['name'])
                    file.append(ans)
                    file.append(open(filename,'rb').read())
                    files.append(file)
                    file = []
                else:
                    value.append(inf['name'])
                    value.append(ans)
                    values.append(value)
                    value = []

            elif inf['type'] == "checkbox":
                ans = None
                while ans != "y" and ans != "n":
                    try:
                        ans = raw_input(inf['name'] + "? [y/n] ")
                    except EOFError:
                        print "\nAborted by user"
                        sys.exit(2)
                    if ans != "y" and ans != "n":
                        print "Answer \"y\" or \"n\""
                if ans == "y":
                    value.append(inf['name'])
                    value.append("checked")
                    values.append(value)
                    value = []
            
            elif inf['type'] == "radio":
                print "Choose one " + inf['name'] + ": "
                num = 1
                for elem in inf['value']:
                    print str(num) + ") " + inf['value'][num-1]
                    num += 1
                ans = 0
                while ans < 1 or ans > num-1:
                    try:
                        ans = int(raw_input("Pick a number: "))
                    except EOFError:
                        print "\nAborted by user"
                        sys.exit(2)
                    except ValueError:
                        print "Error: it must be a number"
                        ans = 0
                value.append(inf['name'])
                value.append(inf['value'][ans-1])
                values.append(value)
                value = []
        elif len(inf['value']) > 0 :
            value.append(inf['name'])
            value.append(inf['value'][0])
            values.append(value)
            value = []
            
    return values, files

def getFormID(url, Request, urlopen):
    """Return form id"""
    txdata = None
    txheaders =  {'User-agent' : 'ccPublisher', 'Refer' : url}
    try:
        req = Request(url, txdata, txheaders) # create a request object
        handle = urlopen(req)
    except IOError, e:
        print 'Failed to open "%s".' % url
        if hasattr(e, 'code'):
            print 'Failed with error code - %s.' % e.code
        elif hasattr(e, 'reason'):
            print "The error reason:", e.reason
            print "This usually means the server doesn't exist, is down, or we don't have an internet connection."
        sys.exit(2)
    else:
        htmlSource = handle.read()
        p = formIDParser()
        p.feed(htmlSource)
        p.close()
        return p.formID

class formIDParser(HTMLParser.HTMLParser):
    """Parse submission form page looking for form id"""
    def __init__(self):
        HTMLParser.HTMLParser.__init__(self)
        self.formID = None
    def handle_starttag(self, tag, attrs):
        if tag=='form':
            for atribute in attrs:
                if atribute[0] == "id":
                    self.formID = atribute[1]

def post_multipart(url, fields, files, urlopen, Request):
    """
    Post fields and files to an http host as multipart/form-data.
    fields is a sequence of (name, value) elements for regular form fields.
    files is a sequence of (name, filename, value) elements for data to be uploaded as files
    Return the server's response page.
    """
    content_type, body = encode_multipart_formdata(fields, files)
    headers = {'Content-Type': content_type,'Content-Length': str(len(body)),
               'User-agent' : 'ccPublisher', 'Refer' : url}
    try:
        req = Request(url, body, headers) # create a request object
        handle = urlopen(req)
    except IOError, e:
        print 'Failed to open "%s".' % url
        if hasattr(e, 'code'):
            print 'Failed with error code - %s.' % e.code
        elif hasattr(e, 'reason'):
            print "The error reason:", e.reason
            print "This usually means the server doesn't exist, is down, or we don't have an internet connection."
            sys.exit(2)
    
    return handle.read()

def encode_multipart_formdata(fields, files):
    """
    fields is a sequence of (name, value) elements for regular form fields.
    files is a sequence of (name, filename, value) elements for data to be uploaded as files
    Return (content_type, body) ready for httplib.HTTP instance
    """
    BOUNDARY = mimetools.choose_boundary()
    CRLF = '\r\n'
    L = []
    for (key, value) in fields:
        L.append('--' + BOUNDARY)
        L.append('Content-Disposition: form-data; name="%s"' % key)
        L.append('')
        L.append(value)
    for (key, filename, value) in files:
        L.append('--' + BOUNDARY)
        L.append('Content-Disposition: form-data; name="%s"; filename="%s"' % (key, filename))
        L.append('Content-Type: %s' % get_content_type(filename))
        L.append('')
        L.append(value)
    L.append('--' + BOUNDARY + '--')
    L.append('')
    body = CRLF.join(L)
    content_type = 'multipart/form-data; boundary=%s' % BOUNDARY
    return content_type, body

def get_content_type(filename):
    return mimetypes.guess_type(filename)[0] or 'application/octet-stream'


if __name__ == '__main__':
    publishcchost(sys.argv)

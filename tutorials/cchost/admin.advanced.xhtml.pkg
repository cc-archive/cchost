<refentry id="{@id}">
 <refnamediv>
    <refname>XHTML in ccHost</refname>
    <refpurpose></refpurpose>
 </refnamediv>
<para>
  <warning>This documenation refers to ccHost 4.5. There are serious changes coming in 5.0
  Make sure to keep tabs at the <ulink href="http://wiki.creativecommons.org/CcHost">ccHost Wiki</ulink>
  </warning>
</para>

{@toc}

<!--- BEGIN XHTML --->

<refsect1 id="{@id rules}"> 
<title>Rules for Editing XHTML</title>
<para>
    The template engine used by ccHost is <emphasis>extremely</emphasis> sensitive to the
    strict rules of XML so consider this section a kind of <important>Do's and Don'ts</important>. But
    keep in mind these are not merely suggestions, if you don't follow these rules your pages will
    not display and the site will be broken until you fix these issues.
</para>
<unorderedlist class="tutlist">
    <listitem><important>The Entire Document Must Be Enclosed</important>
     <para>
         Since your XHTML is going in the middle of the page you do not want any
         <literal>&lt;html&gt;</literal> or <literal>&lt;body&gt;</literal> tags, but 
         the document must be enclosed in something so you might as well put a 
         <literal>&lt;div&gt;</literal> tag at the very top and a <literal>&lt;/div&gt;</literal> 
         at the very bottom. If you object to having a "visible" tag, you can use a
         <literal>&lt;tal:block&gt;</literal>  <literal>&lt;/tal:block&gt;</literal> pair.
      </para>
    </listitem>
    <listitem><important>All Tags Must Be 'Closed'</important>
      <para>
          A tag like <literal>&lt;hr&gt;</literal> is considered to be 'open' and must be closed.
          To close a tag you must include a forward slash before the end: <literal>&lt;hr/&gt;</literal>,
          this goes for <literal>&lt;br /&gt;</literal> <literal>&lt;img src="" /&gt;</literal>
      </para>
    </listitem>
    <listitem><important>All Tags Must Be Matched</important>
      <para>
          A tag like <literal>&lt;p&gt;</literal> must have a matching <literal>&lt;/p&gt;</literal>.
          Same goes for all the table tags you've been lax about <literal>&lt;td&gt;</literal>,
          <literal>&lt;th&gt;</literal>, <literal>&lt;tr&gt;</literal> on down the line.
      </para>
    </listitem>
    <listitem><important>All Tags Must Be Symmetrical</important>
      <para>
          You can be not sloppy about when you close a tag, they have to been 
          closed in the exact reverse order they opened, 
      </para>
      <warning><literal>&lt;b&gt; &lt;i&gt; Hello World &lt;/b&gt; &lt;/i&gt;</literal></warning> 
      <para>
          will break your site because the 'b' tag can't close until the 'i' tag is closed.
      </para>
    </listitem>
    <listitem><important>All Attributes Must Be Quoted</important>
      <warning><literal>&lt;table colspan=3&gt; </literal></warning> 
      <para>
          The above line will cause an error and break your site. You must put quotes around
          all attributes.
      </para>
      <example><literal>&lt;table colspan="3"&gt; </literal></example> 
    </listitem>
    <listitem><important>All Attributes Must Have Values</important>
      <warning><literal>&lt;option selected &gt; </literal></warning> 
      <para>
          The above line will cause an error and break your site. Every attribute
          must have a value, even it's <literal>""</literal>. The accepted way to 
          handle the case above is:
      </para>
      <example><literal>&lt;option selected="selected"&gt; </literal></example> 
    </listitem>
</unorderedlist>
</refsect1> 

<refsect1 id="{@id vars}"> 
<title>Variables Available in XHTML </title>
<para>
    You can individualize your pages by using variables that are recalculated every time
    the page is rendered. For example, if the user is logged you can personalize the page
    based on if they have uploaded anything to your site.</para>
    <para>Rather than list the possible variables here, you can employ the same method
    used by skin writers as described at the 
    <ulink url="http://wiki.creativecommons.org/CcHost_Skins#Viewing_Variables">ccHost Wiki</ulink> to
    print out all the variables available in your system using the <uri>?dump_page=1</uri> 
    query.
</para>
<para>
    You can access these variables on your page with this syntax:
</para>

<example><literal>${variable_name}</literal></example>

<para>For example:</para>

<example><literal>&lt;h1&gt;Welcome to ${site-title}&lt;/h1&gt;
&lt;h2&gt;${site-description}&lt;/h2&gt;</literal></example>

<para>
    To make certain blocks conditional, use the <literal>tal:condition</literal> attribute on any XHTML
    tag. In the following example the DIV will only appear if the system detects the presence of the 
    'logged_in_as' variable. If that variable is there we assume the entire 'user_*' record is available to us:
</para>

<example><literal>&lt;div tal:condition="logged_in_as" &gt;Hello ${user_real_name}&lt;/div&gt;</literal></example>

<para>
    Note that in the <literal>tal:condition</literal> attribute you do not use the <literal>${}</literal> syntax, 
    just the variable name.
</para>

<para>
    Alternately, you can use the <literal>not:</literal> syntax (do not forget the ':') to show something else:
</para>

<example><literal>&lt;div tal:condition="not: logged_in_as" &gt;
   Hey you should &lt;a href="${home-url}register"&gt;register with us!&lt;/a&gt;
&lt;/div&gt;</literal></example>

    <refsect2 id="{@id homeurl}"> 
    <title>${home-url} vs. ${root-url} and ${q}</title>
    <para>
        There are two variables that represent the site's URL in the XHTML templates:
    </para>
    <para>
        <literal>home-url</literal> includes the current virtual root and accounts for pretty URLs 
        while <literal>root-url</literal> does neither. In both cases they including the trailing backslash.
    </para>
    <para>
        Typical <literal>home-url</literal> expands to something like 
        <uri>http://myserver.com/cchost?ccm=/media/</uri>, typical root-url for the same page is 
        <uri>http://myserver.com/cchost/</uri>.
    </para>
    <para>
        Always use the <literal>home-url</literal> whenever you can. The one exception is physical files
        on your server like images, style sheets, etc. in which case you want to start with <literal>root-url</literal>
    </para>
    <para>
        The variable simply called <literal>q</literal> (lower case 'q') which stands for 'question mark.' It 
        maps to either '?' or '&amp;' depending on whether you are configured to use pretty-urls or not. You should 
        use it instead of the actual '?' character whenever you are building urls in templates.
    </para>

    <example><uri>&lt;a href="${home-url}api/query${q}tags=remix"&gt;See remixes...&lt;/a&gt;</uri></example>
    </refsect2>

</refsect1>


<refsect1 id="{@id code}"> 
<title>Working With Dynamic Data in XHTML</title>

<para>
    You can work with dynamic data retrieved from the ccHost system in two steps:
</para>

<orderedlist class="tutlist">
   <listitem>
      Get the data from ccHost into a template variable using a <literal>tal:block</literal> tag.
   </listitem>
   <listitem>
      Display the template variable using XHTML tags using the <literal>tal:repeat</literal>
      for arrays and lists.
   </listitem>
</orderedlist>

  <refsect2 id="{@id get}"> 
  <title>Get the Dynamic Data</title>
    <para>
        For this step there are several PHP functions in ccHost for retrieving dynamic data that are defined
        in <filename>cc-custom.php</filename>. The official developer documenation for these functions
        can be found <ulink url="http://mirrors.creativecommons.org/cchost/docs/cchost/_cc-custom_php.html">here</ulink>.
    </para>
    <note>
        In versions previous to ccHost 4.0 this section referred to the <function>CC_tag_query</function>. This still
        works but has been deprecated in favor <function>cc_query_fmt</function> which is based on 
        the {@tutorial admin.query.pkg Query/Formatter Engine}
    </note>
  </refsect2> 

</refsect1>

<refsect1 id="{@id custom}"> 
<title>Custom Dynamic Data</title>

<para>If the functions provided in ccHost aren't doing it for you and you don't mind
writing a little PHP script then it's very easy to get custom dynamic information
onto one of your pages.</para>
<para>Let's take a scenario where you want to display the newest members of you
community on your home page. To start, create a file 
called <filename>mylib.php</filename> in the <filename>ccextras</filename> 
directory. That has the following code in it:</para>
<programlisting role="php"><![CDATA[
<?

// return the newest five users...
function my_get_users()
{
   $users =& CCUsers::GetTable();
   $users->SetOffsetAndLimit(0,5);
   return $users->GetRecords('');
}

?>
]]></programlisting>
<para>Now the function <function>my_get_users</function> is available to <emphasis>any</emphasis>
template in the system but you'll want to be editing <filename>home.xml</filename>
(which of course is the copy in your private files directory, 
{@tutorial admin.files.pkg#copy right??}). </para>
<para>Getting and displaying the data is exactly the same idea  as the standard way,
this time we'll check if they have an avatar and display it:</para>
<example>
&lt;tal:block define="records php:my_get_users()" /&gt; 

&lt;h2&gt;Our newest users are:&lt;/h2&gt;

&lt;div tal:repeat="record records"&gt;
  &lt;div tal:condition="record/user_avatar_url"&gt;
     &lt;img src="${record/user_avatar_url" /&gt;
  &lt;/div&gt;
  ${record/user_real_name}
  &lt;p&gt;
    Check 'em out 
    &lt;a href="${record/artist_page_url}"&gt;here&lt;/a&gt;!
  &lt;/p&gt;
&lt;/div&gt;

</example>
<para>Of course this is a very simple example and the PHP script can
get very complicated, very quickly but it does prove the point.</para>

</refsect1> 

<!--- END XHTML ----->


</refentry>

<refentry id="{@id}">
 <refnamediv>
    <refname>Backup and Mirrors</refname>
    <refpurpose></refpurpose>
 </refnamediv>

{@toc}


<refsect1 id="{@id backvsex}">
<title>Backup vs. Mirror</title>
<para>
    There are two reasons to save the state of a ccHost installation:
</para>
<orderedlist class="tutlist">
<listitem>
   You want a backup snapshot for disaster or other recovery. That is,
   you want to protect your site from yourself and other environmental
   calamities.
</listitem>
<listitem>
   You want to create a "mirror" of your install on a <emphasis>different</emphasis> 
   machine in order to test new home pages, write code, try out new skins and plugins, etc.
   Mirroring can be thought of <emphasis>export</emphasis> from the 'main' installation
   and <emphasis>import</emphasis> to a 'mirror' installation on another machine.
</listitem>
</orderedlist>
<para>
  Both operations (backup and restore vs. export and import) are essentially the same
  set of steps with some the variations outlined below.
</para>
</refsect1>

<refsect1 id="{@id what}">
<title>What to Backup/Mirror?</title>
<para>When considering a backup or mirror there are four distinct components to
think about:</para>
<orderedlist class="tutlist">
<listitem>
    User uploaded content.
</listitem>
<listitem>
    The database.
</listitem>
<listitem>
    Configuration settings.
</listitem>
<listitem>
    Custom files that you have added and edited. (Make sure to see {@tutorial admin.files.pkg#copy})
</listitem>
</orderedlist>
<para>
    Each of these deserve special attention and a different approach.
</para>
</refsect1>

<refsect1 id="{@id userfiles}">
<title>User Uploads</title>
<para>
    The user uploaded media content files are all under the <filename>people</filename> and
    <filename>contests</filename> directories. (If you don't see these directories
    it is because you haven't uploaded any content yet.)
</para>
<para>
    You should backup the files the same way you would any directory structure:
    copy them somewhere else. 
    <note>
        Make sure to keep the directory tree structure exactly "as is" because
        ccHost makes specific assumptions about the tree.
    </note>
</para>
<para>
    If you are exporting to create a mirror: the media content files are not
    strictly necessary. Unless you are testing the 'download' or 
    'stream' functionality a ccHost installation will operate at
    100% fidelity <emphasis>even when the media content files are not 
    present</emphasis>.
</para>
<note>
  In order to perform the operations below you'll need to know the
  database name, database user name, database user name's password
  and the database's server that you used when you installed 
  ccHost. If you ever forget these then just take a peek inside
  the file <filename>cc-config-db.php</filename> in the root of 
  your installation. 
</note>
</refsect1>

<refsect1 id="{@id database}">
<title>Database</title>
<para>
    Your database holds meta information about every upload and user,
    plus all reviews, ratings, forum threads, etc.
</para>
<para>
    The simplest (and official) way to backup a mysql database is to export the 
    data using either the
    <ulink url="http://dev.mysql.com/doc/refman/5.0/en/mysqldump.html">mysqldump</ulink>
    utility from the command line or 
    <ulink url="http://www.phpmyadmin.net/home_page/index.php">phpMyAdmin</ulink>
    from your browser depending on which you have available.
</para>
<para>
    If you have both available then it depends on how often you back up
    whether you want to make a simple command line script that you run
    very regularly or if you prefer having a visual representation of the
    options available for you on the screen when you perform the export.
</para>
<note>
    The key difference for a mirror is that you 
    do <emphasis>not</emphasis> export the table called <filename>cc_tbl_config</filename>.
</note>


<refsect2 id="{@id mysqldump}">
<title>Saving with mysqldump Command Line</title>
<para>
   To save the contents of your database:
</para>
<example>
mysqldump --create-options --add-drop-table 
          -u USERNAME -pPASSWORD DBNAME &gt; mixterdump.sql
</example>
<para>
   Note this is no space between the <literal>-p</literal> and the password.
</para>
<para>
   If you are in a hosted or otherwise remote environment, you'll
   need to add the <literal>--host</literal> option to specify
   your database server name.
</para>
<example>--host=mysql.someserver.example.com</example>
<para>
    For a mirror operation add the option:
</para>
<example>--ignore-table=DBNAME.cc_tbl_config</example>
</refsect2>

<refsect2 id="{@id restmysql}">
<title>Restoring with mysql Command Line</title>
<para>
   <filename>mysqldump</filename> is only good for, well, dumping. You'll
   use the <filename>mysql</filename> program for restoring. The syntax 
   for that looks something like:
</para>
<example>
mysql -u USERNAME -pPASSWORD -d DBNAME &lt; dbname.sql
</example>

<warning>
   This will completely destroy your existing ccHost installation because this is a 
   <emphasis>replace</emphasis> operation, not a merge.
</warning>
</refsect2>


<refsect2 id="{@id pma}">
<title>Saving from phpMyAdmin</title>
<para>
  From the main phpMyAdmin screen:
</para>
<para>
  Select the ccHost database from the dropdown on the left.
</para>
<para>
  Select the <command>Export</command> tab then fill out the form as follows:
</para>
<unorderedlist class="tutlist">
<listitem>
  Click "Select All" to get the complete list of tables. (For export
  to another machine 
  de-select (using control-click) <filename>cc_tbl_config</filename>.)
</listitem>
<listitem>
  Make sure "SQL" is selected for the output format
</listitem>
<listitem>
  Make sure "Structure" is checked and, under that, "Add DROP TABLE", 
  "Add AUTO_INCREMENT value" and 
  "Enclose name and field names with backquotes".
</listitem>
<listitem>
  Make sure "Data" is checked.
</listitem>
<listitem>
  Check "Save as file."
</listitem>
<listitem>
   Click <command>Go</command> and you should be prompted to 
   download the <filename>dbname.sql</filename> file. 
</listitem>
</unorderedlist>
</refsect2>

<refsect2 id="{@id restpma}">
<title>Restoring from myPhpAdmin</title>
<para>
   From the main phpMyAdmin page select your cchost database from
   the list on the left.
</para>
<para>
   Select the <command>Import</command> tab.
</para>
<para>
   Use the 'Import from file' option and browse for your <filename>.sql</filename> file
   and then click on <command>Go</command>.
</para>
<warning>
   This will completely destroy your existing ccHost installation because this is a 
   <emphasis>replace</emphasis> operation, not a merge.
</warning>
</refsect2>

</refsect1>

<refsect1 id="{@id config}">
<title>Saving Configuration</title>

<refsect2 id="{@id save}">
<title>Configuration Backup</title>
<para>
  Before making extensive, experimental or otherwise scary changes to your configuration you should
  consider taking a snapshot of your configuration:
</para>
<para>
    Browse to <uri>export</uri>. ({@tutorial admin.basic.pkg#urls.doc didn't work??})
    This will return a copy of your configuration directory to your browser.
</para>
<para>
    Every browser has some kind of 'Save page' function typically found on the 'File' menu. 
    Use that feature to save the results of the <uri>export</uri> command to a text file 
    and then copy it to your server. For simplicity's sake, let's say you save it as
    <filename>snapshot1.txt</filename> in the root directory or your server installation.
</para>
<para>
    The command syntax to restore a configuration is <uri>import?i=path_to_file</uri> 
    where <uri>path_to_file</uri> is relative to the your root installation.
</para>
<para>
    In our example to restore your configuration browse to
    <uri>import?i=snapshot1.txt</uri> ({@tutorial admin.basic.pkg#urls.doc didn't work??})
</para>
<para>
    If you are recovering from a nasty page rendering problem you may still see the same
    problem even after the <uri>import</uri> command. In that case don't panic and
    browse to the root of your installation and refresh the browser.
</para>
<warning>
    <uri>import</uri> is a <emphasis>replace</emphasis> operation, not a merge.
    Assume that every setting you've ever set in ccHost, including menus, 
    submit forms, virtual roots, etc. will be reset to the values when
    did the <uri>export</uri>.
</warning>

</refsect2>

<refsect2 id="{@id share}">
<title>Sharing Configurations Between Machines</title>

<para>
   Because your different machine is well, different you will need
   to export and import in a way that accounts for the differences 
   in URLs, local paths, etc.
</para>

<refsect3 id="{@id export}">
<title>Export</title>
<para>
    Browse to <uri>export</uri>. ({@tutorial admin.basic.pkg#urls.doc didn't work??})
</para>
<para>
    Every browser has some kind of 'Save page' function typically found on the 'File' menu. 
    Use that feature to save the results of the <uri>export</uri> command to a location 
    on your mirrored setup. For simplicity's sake, let's say the file is called 
    <filename>export.txt</filename> in the root installation point or your mirror.
</para>
</refsect3>

<refsect3 id="{@id import}">
<title>Import</title>
<para>
    These are the steps to a successful configuration import:
</para>
<unorderedlist class="tutlist">
<listitem>
    Make a copy of <filename>export.txt</filename> and call the
    copy <filename>import.txt</filename>.
</listitem>
<listitem>
    In <filename>import.txt</filename> search for all occurrences of the 
    root URL in your main setup (e.g. 
    <uri>http://example.com/cchost</uri>)
    and replace that with the root URL of your mirrored setup (e.g. 
    <uri>http://localhost</uri>.)
</listitem>
<listitem>
    In <filename>import.txt</filename> search for the location 
    of 'getID3' path (e.g. '/user/bin/getid3') 
    and replace it with your mirrored installation of the getID3 location
    (e.g. 'c:\utils\web\getid3').
</listitem>
<listitem>
    There may be other machine paths in <filename>import.txt</filename> you 
    need to tweak like (e.g. logfiles).
</listitem>
<listitem>
    On your mirror machine browse to <uri>import?i=import.txt</uri>. ({@tutorial admin.basic.pkg#urls.doc didn't work??})
</listitem>
</unorderedlist>
<note>
    There's nothing that says this operation can't work in
    reverse, that is: you configure your development machine (mirror) the way
    you like it, export from there, and import the configuration into your
    main web server installation.
</note>
</refsect3>


<refsect3 id="{@id auto}">
<title>Automating Import</title>

<para>
  Here is a PHP script used by ccMixter developers when mirroring their 
  dev machines (this script is provided 'as is' and will <emphasis>break your site</emphasis>
  if not used properly):
</para>
<programlisting role="php"><![CDATA[
<?
/* Replace these define values with ones that
   apply to your situation
*/
define('EXPORT_FILE', 'd:/cchost/mirror/export.txt');
define('IMPORT_FILE', 'd:/cchost/mirror/import.txt');
define('NEW_SERVER',  'http://localhost');
define('OLD_SERVER',  'http://example.com/cchost');
define('NEW_GETID3',  'd:/bin/web/getid3');

$text = @file_get_contents(EXPORT_FILE);
if( empty($text) )
    die("Can't find " . EXPORT_FILE . "\n");

$text = str_replace( OLD_SERVER, NEW_SERVER );

$getid3 = NEW_GETID3;
$rgs  = "#(.*')([^']+getid3)('.*)#";
$text = preg_replace($rgs, "$1$getid3$3",$text);

/* 
    Put the mirror name into the banner
    so we don't get confused about which 
    machine we're on! 
*/
$new_server = NEW_SERVER;
$rgs  = "/(.*beta_message['\s]+=> )('[^']*')(.*)/";
$text = preg_replace($rgs,"$1'ON $new_server'$3", $text);

/*
    Save off a copy of the new config
    This is what we pass to the 'import'
    command.
*/
$f = fopen( IMPORT_FILE,'w');
fwrite($f,$text);
fclose($f);
?>
]]></programlisting>

</refsect3>
</refsect2>
</refsect1>

<refsect1 id="{@id custom}">
<title>Saving Custom Files</title>

<para>
    If you are doing a full backup of your system then save everything under your 
    root installation (might as well). You will probably want to save the 
    {@tutorial admin.backup.pkg#userfiles content files} separately
    because of their size.
</para>

<refsect2 id="{@id mirror}">
<title>Mirroring Custom Files</title>

<para>
    If you plan to do extensive development on a site we highly
    recommend using a version control system like 
    <ulink url="http://subversion.tigris.org/">Subversion</ulink> (SVN). 
    Using something like SVN will automate the syncing of multiple
    machines.
</para>
<para>
    For a mirror the best thing to do is to install ccHost using the exact 
    same version of the software on the main machine, then copy your files 
    directory (see {@tutorial admin.files.pkg#copy}) to your mirror.
</para>

<para>
    If you have custom skins then don't forget to copy your 
    <filename>cctemplates</filename> as well.
</para>
<para>
    See {@tutorial admin.basic.pkg#dirstruct}
</para>
</refsect2>

</refsect1>

</refentry>
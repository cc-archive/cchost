<refentry id="{@id}">
 <refnamediv>
    <refname>Basics </refname>
    <refpurpose></refpurpose>
 </refnamediv>
<para>
  <warning>This documenation refers to ccHost 4.5. There are serious changes coming in 5.0
  Make sure to keep tabs at the <ulink href="http://wiki.creativecommons.org/CcHost">ccHost Wiki</ulink>
  </warning>
</para>

{@toc}


<!--------- BEGIN OF BASIC CONCEPTS ----------------->

<refsect1 id="{@id urls}">
<title>Understanding ccHost URLs</title>
<para>Understanding how URLs work in ccHost is a very important concept that you should understand before doing anything else.</para>
<refsect2 id="{@id parts}">
<title>URL Parts</title>
<para>ccHost URLs are composed of four main parts:</para>
<orderedlist class="tutlist">
  <listitem><important>Root URL of installation</important>
     <para>This is the URL address of where <filename>index.php</filename> lives. For example: 
       <uri>http://example.com</uri>, or <uri>http://example.com/cchost</uri>
     </para>
  </listitem>
  <listitem><important>Virtual Root</important>
    <para>Don't worry if you don't know what a 'ccHost virtual root' is, we'll get to it {@tutorial admin.advanced.pkg#vroots here} but for now assume it's the word <uri>media</uri>.
    </para>
  </listitem>
  <listitem><important>Command</important>
    <para>This part of the URL maps to an internal command in ccHost. This can be anything from
  a request for a submit form, a feed, a record listing, etc. Examples are <uri>people</uri> which shows
  a listing of the latest registered users who have uploaded or <uri>files</uri> which lists the latest
  uploads.
    </para>
  </listitem>
  <listitem><important>Parameters</important>
    <para>Many if not most commands accept and even require parameters. For example, adding a specific user's name to the <uri>people</uri> command will display the user's main page, e.g. <uri>people/rejon</uri>
    </para>
  </listitem>
</orderedlist>
<para>You should refer to the {@tutorial reference.commands.pkg ccHost Command Reference} for a listing of all
available commands.</para>
<para>If you have enabled 'pretty URLs' in your installation then all the elements are strung together into one URL:</para>
<example><uri>http://example.com/media/people/rejon</uri></example>
<para>If not, then everything starting from the virtual root is prepended the following way:</para>
<example><uri>http://example.com?ccm=/media/people/rejon</uri></example>
</refsect2>


<refsect2 id="{@id menus}">
<title>URLs in Menus and Navigator Tabs</title>
<para>
In general when asked for an URL for menus or navigator tabs, all you enter is the command and parameters. The system will assume you want the command to execute in the current virtual root and already knows if your site uses pretty URLs or not. In fact you can change your installation to use pretty URLs later and all these menu
items will continue to work.</para>

<para>If you enter a fully qualified URL (anything that starts with <uri>http://</uri>) the menu and tab
systems will redirect the browser to that url, no matter what the rest of the address it. 
If the action URL does not start with <uri>http://</uri> then the system will assume this 
is a ccHost command with parameters and attempt to execute it as outlined above.</para>

</refsect2>

<refsect2 id="{@id xhtml}">
<title>URLs in XHTML Templates</title>
<para>
It is very important that you use <literal>${home-url}</literal> variable as a prefix to commands ({@tutorial admin.advanced.xhtml.pkg#vars.homeurl more about home-url}) in URLs when working in template files:</para>
<example>
  You can &lt;a href="{$home-url}submit"&gt;submit files&lt;/a&gt; to our site...
</example>
<para>The URL in the href attribute will auto-magically expand to something like:
</para>
<example>
  <uri>http://yourserver.com/cchost?ccm=/myvroot/submit</uri>
</example>
<para>Don't put a trailing forward slash after the <literal>${home-url}</literal> but if you need a parameter
then put one between the command and the parameter</para>
<example>
  Go to &lt;a href="{$home-url}people/{user_name}"&gt;your home page&lt;/a&gt; now
</example>

</refsect2>

<refsect2 id="{@id vroot}">
<title>Forcing Virtual Roots</title>
<para>
There may come a time where you want a menu item like <command>Register</command> or a navigator tab like 
<command>Home</command> to go to a specific virtual root like <uri>media</uri>. In that case you will want
to specify the full URL in the menu item or tab, like <uri>http://root-installation.com?ccm=/media/register</uri>. That way no matter what virtual root the user is in, they will be taken to the main register screen or
in the case of a 'Home' tab simply <uri>http://root-installation</uri>.</para>

<para>If you change your site to use pretty URLs at some point these URLs will continue work, they just 
won't be, well, pretty. At that point you can edit these menu items to the pretty versions without the 
<uri>?ccm=</uri>.</para>
<warning>If you use pretty URLs in your menus and disable pretty URLs in the system, then those menu items are essentially broken. 
</warning>

</refsect2>

<refsect2 id="{@id doc}">
<title>URLs in This Document</title>
<para>
    In this documentation when asked to browse to a location, it will only say 
    the command and parameters and assume you will prepend the proper parts that 
    apply to your installation and virtual root configuration. For example, if you 
    see a request like "browse to <uri>admin/menu/killcache</uri>" that you are 
    expected to enter the following into your browser's address bar:
</para>

<example><uri>http://example.com?ccm=/<emphasis>media</emphasis>/login</uri>  (with pretty URLs OFF)
<uri>http://example.com/<emphasis>media</emphasis>/login</uri> (with pretty URLs ON)</example>

<para>
    Note the addition of the virtual root <uri>media</uri> in both cases. 
    If you are reading this, it is probably because you forgot to add that.
</para>

<para>
    In some cases you may be asked to add a query, as in 'browse to 
    <uri>command?query=foo</uri>'.
</para>

<para>
    This would expand to:
</para>

<example><uri>http://example.com/media/command?query=foo</uri> (pretty URLs ON)
<uri>http://example.com?cmd=/media/command<emphasis>&amp;</emphasis>query=foo</uri> (pretty URLs OFF)</example>

<para>    
    Note how the question mark became an
    ampersand in the non-pretty URL version.
</para>

<para>
    Most of the requests to browse to a command <emphasis>assume you are currently
    logged in with administrative rights</emphasis>. 
</para>

</refsect2>

</refsect1>

<refsect1 id="{@id tagsvtags}">
<title>Terminology: "tag" vs. "tag" vs. "tag"</title>
<para>It is worth noting as quickly as possible that there are <emphasis>three</emphasis> different
meanings of the word <command>tag</command> used when administering a ccHost installation. All
three are conventions of the subsystems we use and 
we felt it was better to use context as a disambiguator rather than inventing terms for processes
everybody knows as 'tagging' -- albeit with different purposes.</para>
<unorderedlist class="tutlist">
  <listitem><emphasis>HTML Template Tags</emphasis>
      <para>
        XHTML pages are made up of tags. ccHost generates the XHTML using XML scripts that 
        contain specialized template tags. You use these tags when 
        {@tutorial admin.advanced.xhtml.pkg customizing XHTML pages}.
      </para>
  </listitem>
  <listitem><emphasis>MP3/ID3 Tags</emphasis>
      <para>
        The title, author and other meta data associated with an ID3 compliant media
        file (like MP3s) are embedded directly into the media via ID3 tags. 
      </para>
  </listitem>
  <listitem><emphasis>'Folksonomy' Tags</emphasis>
      <para>
        These kinds of tags are used to create categories of uploads. There is 
        a menu item <command>Browse Tags</command> so visitors to your site can quickly
        identify categories of uploads at your site.
      </para>
      <para>
        Just to confuse things even further there are three types of folksonomy tags:
      </para>
      <orderedlist>
          <listitem><emphasis>User tags</emphasis>: The uploader assigns these tags
           during the upload process and can edit them through the <command>Edit</command>
           link on the upload's main page.</listitem>
          <listitem><emphasis>System tags</emphasis>: These are tags controlled
          internally by the system, usually by file verifiers and have to
          do with the internal data formats (e.g. 'stereo', 'image', etc.).
          Neither users or admins can edit these tags directly.</listitem>
          <listitem><emphasis>Admin tags</emphasis>: These are tags that controlled
          by the admin through the use of the <command>Manage Site/Submit Forms</command> and 
          <command>Global Settings/Tags</command> settings pages and on individual uploads through
          the <command>Admin</command> link on the upload's main page. Users can not edit
          these tags.</listitem>
      </orderedlist>
  </listitem>
</unorderedlist>
</refsect1>

<refsect1 id="{@id access}">
<title>Access Rights</title>
<para>The main access levels are <emphasis>Everyone</emphasis>, <emphasis>Registered Users</emphasis>
and <emphasis>Administrators</emphasis>.</para>
<para>The potentially confusing thing is that both internal commands and user interface elements (like menu items and navigator tabs) have security clearances
but they have very different effects:</para>
<note>Setting a security level on a menu or tab item does not restrict functionality, it only affects the
visibility of the menu or tab item.</note>
<para>In other words, you may have a menu item that invokes the <uri>editorial/picks</uri> command
and mark the menu item as <emphasis>Administrators Only</emphasis> but that will only hide the menu
item from everyone but Administrators, it would <emphasis>not</emphasis> prevent someone from entering
that command into their browser directly and seeing the results of the command because that command happens
to be registered integrally for <emphasis>Everyone</emphasis>.</para>

<param>In order to change the access to the actual command use <uri>admin/access</uri> command.</param>

<para>Also note that the access permissions
on commands only determine whether the code for that command is initially invoked. The code itself 
may determine even stricter criteria for the command.</para>

<para>In other words, a command might be marked as for <emphasis>Registered users only</emphasis>
(e.g. <uri>editorial/submit/{upload_id}</uri>) but the code that implements that command may have
further restrictions (only allows 'editors' to do the actual submit).</para>

<para>There is also an implied 'ownership' built into the code for upload and user
records. That means a command marked <emphasis>Registered users only</emphasis> like <uri>files/delete/{upload_id}</uri>
is further restricted by who 'owns' the upload, that is: who uploaded the thing.</para>

	<title>Super Admins</title>
	<para>From <emphasis>Global Settings</emphasis> you can assign a small group of users 'super access'
	which overrides normal admin privileges.</para>
	<para>You can use the <uri>admin/access</uri> command to determine which commands in the system
	are restricted to this group and this group only.</para>

</refsect1>

<refsect1 id="{@id paths}">
<title>Where ccHost Looks for Files</title>
<para>Starting in ccHost version 3.1 admins have full control over where ccHost
looks for files and writes logs and temporary files during the course of building a page.</para>
<para>If you installed 3.1 or later, the installation program created a directory
structure with a name you specified under your root installation that you should, 
but are not obliged to, use for your customizing your site.</para>

<para>If you installed before 3.1 we recommend you setup a similar structure, but again,
you don't have to if you have another system that works for you.</para>

<para>The <command>Global Settings/Paths</command> configuration screen gives you
full control of where and how ccHost looks for files.</para>

<refsect2 id="{@id dirstruct}">
<title>Directories Explained</title>

<para>
The following tables explains both the system and admin directories. 
These are here for 
reference in relation to the <command>Global Settings/Paths</command> 
configuration screen. 
</para>
<table>
  <row>
      <entry class="fn"><uri>ccadmin</uri></entry>
      <entry class="fd">
          Installation directory. ccHost will not run until you
          rename this directory.
      </entry>
  </row>
  <row>
      <entry class="fn"><uri>ccextras</uri></entry>
      <entry class="fd">
          ccHost Developers use this directory to add 
          features to ccHost. 
          <note>
            ccHost will always look in this directory first, before
            looking in any of the 'Plugins Path' directories and
            load any file with a <filename>.php</filename> extension.
            You can not change this behavior.
          </note>
          <para>
          </para>
      </entry>
  </row>
  <row>
      <entry class="fn"><uri>ccfiles</uri></entry>
      <entry class="fd">
          The default directory used by the <uri>viewfile</uri> (a.k.a. <uri>docs</uri>) command.
          You can replace this functionality by editing the 'viewfile
          Path' field.
      </entry>
  </row>
  <row>
      <entry class="fn"><uri>ccimages</uri></entry>
      <entry class="fd">
          ccHost security confirmation and other internal
          modules that need images use these files. 
          These are also where skins look for common images. 
          You put your custom images into a directory based
          off one of the directories in the 'Skins Path' 
          field.
      </entry>
  </row>
  <row>
      <entry class="fn"><uri>cclib</uri></entry>
      <entry class="fd">
          The main code directory. You should never touch the
          contents unless specifically told to do so 
          by ccHost developers.
      </entry>
  </row>
  <row>
      <entry class="fn"><uri>cctemplates</uri></entry>
      <entry class="fd">
          Directory for factory skins. The skin architecture is such that
          you should not have to make any edits to existing files.
          Doing so will cause problems when you update ccHost. Your
          skins should be based off one of the directories in the 
          'Skins Path' field.
      </entry>
  </row>
  <row>
      <entry class="fn"><uri>contests</uri></entry>
      <entry class="fd">
          Created by ccHost the first time
          a contest is created. It holds all contest sources
          and entries partitioned by contest name and then
          by user below that. Having this structure makes it
          easy locate all the entries in a contest once the
          entry period has closed.
      </entry>
  </row>
  <row>
      <entry class="fn"><uri>locale</uri></entry>
      <entry class="fd">
          Internationalization files.
      </entry>
  </row>
  <row>
      <entry class="fn"><uri>people</uri></entry>
      <entry class="fd">
          Created by ccHost the first time someone 
          uploads a file. It holds all non-contest
          related user content and is divided by
          user's login name.
      </entry>
  </row>
  <row>
      <entry class="fn"><uri>my_files</uri></entry>
      <entry class="fd">
          Created by the ccHost install program. 
          You use this directory for all customizations
          to your site.
          <note>The actual name of this directory depends on
          what you named it during the install process.</note>
      </entry>
  </row>
  <row>
      <entry class="fn"><uri>my_files/cc-error-msg.txt</uri></entry>
      <entry class="fd">
          This is a file 
          used by the system when a fatal error 
          has occurred to display a message to 
          the user visiting your site. Edit this file (HTML allowed)
          to change the message seen by users when 
          this happens or direct the system to another file
          in the 'System Error Message' field.
      </entry>
  </row>
  <row>
      <entry class="fn"><uri>my_files/disabled-msg.txt</uri></entry>
      <entry class="fd">
          This is a file 
          used by the system when the admin has disabled 
          the site. Edit this file (HTML allowed)
          to change the message seen by users when 
          this happens or direct the system to another file
          in the 'Site Disabled Message' field.
      </entry>
  </row>
  <row>
      <entry class="fn"><uri>my_files/lib</uri></entry>
      <entry class="fd">
          ccHost will look in this directory for extra
          modules to load. Any file with a .php extension
          will be loaded and parsed to be very careful
          what files go in there. You change where ccHost
          looks for these files or add additional directories
          using the 'Plugin Path's field.
      </entry>
  </row>
  <row>
      <entry class="fn"><uri>my_files/skins</uri></entry>
      <entry class="fd">
          ccHost will look in this directory for resolve
          all HTML template searches, including the main
          skin page and sidebar.xml. You change where ccHost
          looks for these files or add additional directories
          using the 'Skins' field.
          <note>When calling for template from <emphasis>within</emphasis>
          another template, the system will look at the 'current'
          directory -- that is: the directory of the calling template
          -- before looking at any of the 'Skins' paths.</note>
      </entry>
  </row>
  <row>
      <entry class="fn"><uri>my_files/temp</uri></entry>
      <entry class="fd">
          ccHost use this directory temporary files. It
          is always safe to delete any files here as the 
          system will re-create them if needed.
      </entry>
  </row>
  <row>
      <entry class="fn"><uri>my_files/viewfile</uri></entry>
      <entry class="fd">
          ccHost will look in this directory for files
          appened to the 'viewfile' (a.k.a. 'docs') command. For example:
          <uri>docs/home</uri>. You change where ccHost
          looks for these files or add additional directories
          using the 'viewfile Command' field. Also note that the .xml 
	  extension is optional in the command.
      </entry>
  </row>
  <row>
      <entry class="fn"><uri>cc-config-db.php</uri></entry>
      <entry class="fd">
          This is a file in your root installation
          created by ccHost installer and specifies
          your installation's database access. ccHost
          will not run without the presence of this file
          and will not operate properly if the data
          inside does not match your server's 
          database access configuration.
      </entry>
  </row>
  <row>
      <entry class="fn">
         <uri>cc-includes.php</uri>, <uri>cc-non-ui.php</uri>,
         <uri>cc-inc-extras.php</uri>
      </entry>
      <entry class="fd">
          These are important system files, do not touch these
          as they are essential to running your site.
      </entry>
  </row>
  <row>
      <entry class="fn"><uri>cc-custom.php</uri></entry>
      <entry class="fd">
          These are helper routines used by the
          sidebar content. See {@tutorial admin.ui.pkg#sidebar}.
          You should not touch this file. 
          If you wish to have custom versions of this, you should
          include a new .php source in one of the directories
          in the 'Plugin Paths' field.
      </entry>
  </row>
</table>

<para>
  The following table describes non-essential files and directories
  that come with the installation package but are not used by
  ccHost to operate your installation.
</para>
<table>
  <row>
      <entry class="fn"><uri>cctools</uri></entry>
      <entry class="fd">
          This directory has been deprecated and will be removed in 
          future releases. 
      </entry>
  </row>
  <row>
      <entry class="fn"><uri>AUTHORS</uri>, 
      <uri>COPYING</uri>, <uri>HACKING</uri>, <uri>LICENSE.TXT</uri>,
      <uri>NEWS</uri>, <uri>POTS</uri>,
      <uri>README</uri>, <uri>VERSION</uri>
      <uri>ChangeLog</uri>
      </entry>
      <entry class="fd">
          These are all informational files,
          standard that comes with open source
          projects. ccHost never actually looks
          at these files.
      </entry>
  </row>
  <row>
      <entry class="fn">
        <uri>bin</uri>, <uri>cchost.spec</uri>, 
        <uri>Makefile</uri>, <uri>Makefile.include</uri>, 
        <uri>Makefile.language</uri>
      </entry>
      <entry class="fd">
          Utility files and directory used by ccHost developers for helping with low level maintenance. ccHost has
          no dependency on these files and directory and they 
          are not needed for normal ccHost web site operation.
      </entry>
  </row>
</table>
</refsect2>

</refsect1>

<!--------- END OF BASIC CONCEPTS ----------------->

</refentry>
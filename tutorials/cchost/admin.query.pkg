<refentry id="{@id}">
 <refnamediv>
    <refname>Using the ccHost Query/Formatting Engine </refname>
    <refpurpose></refpurpose>
 </refnamediv>
<para>
  <warning>This documenation refers to ccHost 4.5. There are serious changes coming in 5.0
  Make sure to keep tabs at the <ulink href="http://wiki.creativecommons.org/CcHost">ccHost Wiki</ulink>
  </warning>
</para>

{@toc}

<!--------- BEGIN QUERY ----------------->

<refsect1 id="{@id qoverview}">
  <title>ccQFE Overview</title>
  <para>
    To be truly productive (and creative!) with a ccHost installation it
    is very important that you become familar with the ccHost Query/Formatter Engine (ccQFE)
    because it is <emphasis>the</emphasis> way to get information about uploads
    in your system. 
  </para>
  <para>
ccQFE can be employed for features large and small. The ccQFE powers much 
of ccMixter, from the navigation tabs, Remix Radio, Publicize, Playlists, Picks Page, Song of the Day,
Sample Browser, and dozens of other places.  
  </para>
  <para>
    The ccQFE works likes this: queries requests go in, formatted data comes out.
  </para>
  <para>
    All the query requesta are done through URL type query strings 
    (e.g. <uri>?tags=remix&amp;user=teru</uri>
    is how you request remixes uploaded by a user with a login name of 'teru').
    And that format doesn't change no matter where you are asking from, the browser,
    a XHTML template or even specialized plug-ins.
  </para>
  <para>
    One of the parameters is always a 'format' (or 'f' for short) so that
    you can control what the results will look like. So 
    <uri>tags=remix&amp;user=teru&amp;f=rss</uri> means you want the
    results to be returned as an RSS/Podcast feed.
  </para>
  <para>
    The formatted output can be in one of any number of formats
    such as native PHP, comma separated plain text, RSS, Atom, XSPF and JSON. 
    You can also ask for an endless (and customizable) number of HTML snippets or other 
    text based formats.
  </para>
  <para>
    A complete and in sync version of the reference documenation for the Query
    Engine is included in your ccHost installation at <uri>docs/query</uri>.
  </para>
  <para>
    <note>Experimation is key to success. There are hundreds, maybe thousands of permutations
    of request parameters and output formats. Some work better (if at all) then others so get
    used to writing a lot of '?' and '&amp;' on your way to finding the best combinations for
    your site.
    </note>
  </para>
</refsect1>

<refsect1 id="{@id examples}">
<title>Examples</title>

	<refsect2 id="{@id browser}">
		<title>In the Browser</title>
		<para>
			The base url is <uri>api/query</uri> and parameters are added using standard URL query string
			parameters. The following will display the oldest remixes using the default skin:
		</para>
		<example><uri>http://your_installation/media/api/query?tags=remix&amp;sort=date&amp;dir=ASC</uri></example>
    <para>
      You can change the title of the display:
    </para>
		<example><uri>http://your_installation/media/api/query?tags=remix&amp;sort=date&amp;dir=ASC&amp;title=Oldest Uploads</uri></example>
	</refsect2>

	<refsect2 id="{@id navtabs}">
		<title>Navigator tabs</title>
		<para>
      When creating and editing navigator tabs specify <emphasis>Query</emphasis> as the Function
      and use the Data field to enter your query request. The default format is 'page' which will
      return a page of results formatted with the standard upload listing. See {@tutorial admin.tutnav.pkg}
		</para>

    <para>
      <note>
        HINT: You can also embed a query into an XHTML template using any of the methods below,
        then use the <command>Execute URL</command> as the Function and <uri>docs/your_template</uri>
        as the 'Data' field.
      </note>
    </para>
	</refsect2>

	<refsect2 id="{@id templates}">
		<title>Templates and HTML files (Native)</title>
    <orderedlist class="tutlist">
      <listitem>
          Create a file in your <uri>viewfile</uri> directory called <filename>testquery.xml</filename>
      </listitem>
      <listitem>
          In that file place the following:
<example><literal>
&lt;!-- 1. --&gt; &lt;div&gt;
&lt;!-- 2. --&gt; &lt;!-- this display the highest rated remixes on the site --&gt;
&lt;!-- 3. --&gt;   &lt;tal:block define="records php:cc_query_fmt('tags=remix&amp;sort=score&amp;dir=desc&amp;limit=5');" /&gt;
&lt;!-- 4. --&gt;   &lt;ol&gt;
&lt;!-- 5. --&gt;     &lt;li tal:repeat="R records"&gt;
&lt;!-- 6. --&gt;         &lt;a href="${R/file_page_url}"&gt;${R/upload_name}&lt;/a&gt;
&lt;!-- 7. --&gt;     &lt;/li&gt;
&lt;!-- 8. --&gt;   &lt;/ol&gt;
&lt;!-- 9. --&gt; &lt;/div&gt;
</literal></example>
      </listitem>
      <listitem>
        Browse to <uri>docs/testquery</uri> ({@tutorial admin.basic.pkg#urls.doc didn't work??}) 
      </listitem>
    </orderedlist>
    <para>
      Lines 1. and 9. are necessary to make this a complete XML document ( See {@tutorial admin.advanced.xhtml.pkg} )
    </para>
    <para>
      The acutal query request is done on line 3. In it we ask for:
    </para>
      <unorderedlist class="tutlist">
          <listitem>
            <emphasis>tags=remix</emphasis> - uploads with the tag 'remix'
          </listitem>
          <listitem>
            <emphasis>sort=score</emphasis> - sorted by user scores
          </listitem>
          <listitem>
            <emphasis>ord=desc</emphasis> - sort by putting the highest score first
          </listitem>
          <listitem>
            <emphasis>limit=5</emphasis> - get no more than 5 records
          </listitem>
      </unorderedlist>
    <para>
      The default output format for <literal>cc_query_fmt</literal> is native records (PHP arrays)
      so we didn't specify any other type.
    </para>
    <para>
      We called the resulting array <literal>records</literal> and on live 5. we tell the template engine to 
      iterate over the array and put each one into a variable called <literal>R</literal>.
    </para>
    <para>
      If you have a template file that you want to reuse in you use the phpTAL's <command>include</command>
      syntax. The following code will display the details for a specific record using a pre-cooked
      template that expects a variable called <literal>records</literal>
    </para>

<example><literal>
&lt;div&gt;
&lt;!-- 2 --&gt;   &lt;tal:block define="records php:cc_query_fmt('ids=8445');" /&gt;
&lt;!-- 3 --&gt;   &lt;phptal:block include="string:formats/detail.xml" /&gt;
&lt;/div&gt;
</literal></example>

	</refsect2>

	<refsect2 id="{@id templates}">
		<title>Templates and HTML files (AJAX)</title>
    <para>
        If you find yourself reusing the same snippet of template in multiple places around your
        site you have the option to save the snippet to your server and invoke it via AJAX.
    </para>
    <orderedlist class="tutlist">
      <listitem>
          Create a file in your <uri>viewfile</uri> directory called <filename>testajaxquery.xml</filename>
      </listitem>
      <listitem>
          In that file place the following:
<example><literal>
&lt;div&gt;
&lt;!-- 2 --&gt;   &lt;div id="target"&gt;&lt;/div&gt;
&lt;!-- 3 --&gt;   &lt;script&gt;
&lt;!-- 4 --&gt;   //&lt;!--
&lt;!-- 5 --&gt;     new Ajax.Updater( 'target', 
&lt;!-- 6 --&gt;       '${home-url}api/query${q}tags=remix&amp;sort=score&amp;ord=desc&amp;f=html&amp;t=links&amp;limit=5',
&lt;!-- 7 --&gt;       { method: 'get' } );
&lt;!-- 8 --&gt;   // --&gt;
&lt;!-- 9 --&gt;   &lt;/script&gt;
&lt;/div&gt;
</literal></example>
      </listitem>
      <listitem>
        Browse to <uri>docs/testajaxquery</uri> ({@tutorial admin.basic.pkg#urls.doc didn't work??}) 
      </listitem>
    </orderedlist>
    <para>
      The code <literal>new Ajax.Updater</literal> is from the <ulink url="http://google.com/search?q=prototype.js">prototype.js</ulink>
      library that ccHost uses for fancy Javascript magic.
    </para>
    <para>
      The acutal query request is done on line 6. In it we ask for the same thing as the Native example
      above. The difference is that we specifiy an output format of <literal>html</literal> and
      specifically request a template snippet called <literal>links</literal>.
    </para>
    <para>
      See {@tutorial admin.advanced.xhtml.pkg#vars.homeurl} for an explanation of some of the other syntax.
    </para>
      <unorderedlist class="tutlist">
          <listitem>
            <emphasis>f=html</emphasis> - return the results as HTML
          </listitem>
          <listitem>
            <emphasis>t=links</emphasis> - <literal>links</literal> is the name of a template. The actual
            file is in your installation at <filename>cctemplates/formats/links/links.xml</filename>. You can 
            create your templates snippets like this and put them into your <filename>skins</filename> directory
            to get the same effect.
          </listitem>
      </unorderedlist>
	</refsect2>

	<refsect2 id="{@id templates}">
		<title>Templates and HTML files (Universal/"Publicize")</title>
    <para>
      You can get the same results from the query engine even if you want to include the same information
      on another web page (like your blog or myspace page) with the following code:
    </para>
<example><literal>
&lt;script 
   src="http://yourserver.com/media/&gt;tags=remix&amp;sort=score&amp;ord=desc&amp;f=docwrite&amp;t=links&amp;limit=5" 
   type="text/javascript" &gt;&lt;script&gt;
</literal></example>
      <para>
          This will have the effect of injecting the results directly onto the page.
      </para>
  </refsect2>


</refsect1>

</refentry>
